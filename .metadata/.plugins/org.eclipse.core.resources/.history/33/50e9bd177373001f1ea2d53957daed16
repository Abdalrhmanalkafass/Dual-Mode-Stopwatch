/*
 * main.c
 *
 *  Created on: Sep 15, 2024
 *      Author: ALkAFASS
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
signed char sec_unit = 5;
unsigned char sec_tens = 0;
unsigned char min_unit = 0;
unsigned char min_tens = 0;
unsigned char hour_unit = 0;
unsigned char hour_tens = 1;
unsigned char mode = 0;  // 1=count up , 0= count down ,

void count_up() {
	sec_unit++;
	if (sec_unit == 10 && sec_tens != 5) {
		sec_unit = 0;
		sec_tens++;
	}
	if (sec_unit == 10 && sec_tens == 5) {
		sec_unit = 0;
		sec_tens = 0;
		min_unit++;
	}
	if (min_unit == 10 && min_tens != 5) {
		min_unit = 0;
		min_tens++;
	}
	if (min_unit == 10 && min_tens == 5) {
		min_unit = 0;
		min_tens = 0;
		hour_unit++;
	}
	if (hour_unit == 10 && min_tens != 5) {
		hour_unit = 0;
		hour_tens++;
	}
	//// function stop when infinity
}
void count_down() {
	sec_unit--;
	if (sec_unit == -1 && sec_tens !=0 ) {
		sec_unit = 9;
		sec_tens--;
	}
	if (sec_unit == -1 && sec_tens == 0 && min_unit!=0 ) {
		sec_unit = 9;
		sec_tens = 5;
		min_unit--;
	}
	if (sec_unit == -1 && sec_tens == 0 && min_unit==0 && min_tens!=0 ) {
		sec_unit = 9;
		sec_tens = 5;
		min_unit = 9;
		min_tens--;
	}
	if (sec_unit == -1 && sec_tens == 0 && min_unit==0 && min_tens==0 && hour_unit != 0) {
		sec_unit = 9;
		sec_tens = 5;
		min_unit = 9;
		min_tens = 5;
		hour_unit--;
	}
	if (sec_unit == -1 && sec_tens == 0 && min_unit==0 && min_tens==0 && hour_unit == 0 && hour_tens != 0 ) {
		sec_unit = 9;
		sec_tens = 5;
		min_unit = 9;
		min_tens = 5;
		hour_unit = 9;
		hour_tens--;
	}
	/////function stop when 00000 ;
}

void display() {
	PORTA = 0b00100000;
	PORTC = sec_unit;
	_delay_ms(5);
	PORTA = 0b00000000;
	PORTA = 0b00010000;
	PORTC = sec_tens;
	_delay_ms(5);
	PORTA = 0b00000000;
	PORTA = 0b00001000;

	PORTC = min_unit;
	_delay_ms(5);
	PORTA = 0b00000000;
	PORTA = 0b00000100;
	PORTC = min_tens;
	_delay_ms(5);
	PORTA = 0b00000000;
	PORTA = 0b00000010;
	PORTC = hour_unit;
	_delay_ms(5);
	PORTA = 0b00000000;
	PORTA = 0b00000001;
	PORTC = hour_tens;
	_delay_ms(5);
	PORTA = 0b00000000;
}

void timer1_init() {
	// Set CTC mode
	TCCR1B |= (1 << WGM12);

	// Set compare value
	OCR1A = 15625;

	// Set prescaler to 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);

	// Enable Output Compare A Match Interrupt
	TIMSK |= (1 << OCIE1A);

	// Enable global interrupts
	SREG |= (1 << 7);

}

ISR(TIMER1_COMPA_vect) {
	if (mode)
		count_up();
	else
		count_down();
}
void RED_LED_ON() {                       //count up
	DDRD |= (1 << 4);
	PORTD |= (1 << 4);

}
void RED_LED_OFF() {                       //count up
	DDRD |= (1 << 4);
	PORTD &= ~(1 << 4);

}
void YELLOW_LED_ON() {                   //count down
	DDRD |= (1 << 5);
	PORTD |= (1 << 5);
}
void YELLOW_LED_OFF() {                   //count down
	DDRD |= (1 << 5);
	PORTD &= ~(1 << 5);
}
void current_mode() {

	DDRB &= ~(1 << 7);
	PORTB|=(1<<7);   // internal pull up res
	if (!(PINB & (1 << 7))) {
		_delay_ms(30);
		if (!(PINB & (1 << 7))){
		if (mode == 0)
			mode = 1;
		else if (mode == 1)
			mode = 0;
		}
	}
	while (!(PINB & (1 << 7))) {}
}
void sec_inc(){
	DDRB &=~ (1<<6);
	PORTB |=(1<<6) ;   //internal pull up
	if (!(PINB & (1 << 6))) {
			_delay_ms(30);
			if (!(PINB & (1 << 6))){
			sec_unit++;
			if (sec_unit==10 && sec_tens!= 5) {
				sec_unit =0 ; sec_tens++;
			}
			if (sec_unit == 10 && sec_tens == 5) {
					sec_unit = 0;
					sec_tens = 0;
				}
			}
		}
		while (!(PINB & (1 << 7))) {}
}
void sec_dec(){}
void min_inc(){}
void min_dec(){}
void hour_inc(){}
void hour_dec(){}




int main(void) {
	//timer1_init();
	DDRC = 0b00001111;
	DDRA = 0b11111111;
	PORTA = 0b11111111;
	while (1) {

		current_mode();
		sec_inc();
		sec_dec();
		min_inc();
		min_dec();
		hour_inc();
		hour_dec();

		if (mode == 1) {
			RED_LED_ON();
			YELLOW_LED_OFF();
		} else if (mode == 0) {
			YELLOW_LED_ON();
			RED_LED_OFF();
		}

		display();
	}

	return 0;
}

